import "Obsidian Runtime/src/Runtime/edu/cmu/cs/obsidian/java-utilities/System.obs"
import "Shipping/Transport.obs"



main contract ShippingDriver {

    int totalShipments;
    string nextID;

    ShippingDriver() {
        totalShipments = 0;
        nextID = "1";
    }

    transaction createAgreement(string pseller, string pshipper, string pbuyer, string psource,
                               string pdest, int pload, string pdescription, string pplannedDate) returns Shipment@Contract {
        Shipment s = new Shipment(nextID, pseller, pshipper, pbuyer, psource, pdest, pload, pdescription, pplannedDate);
        totalShipments = totalShipments + 1;
        if (nextID == "1") {
            nextID = "2";
        } else {
            nextID = "1";
        }
        string id = s.getID();
        return s;
    }
}




contract Shipment {
    string id;
    string seller;
    string shipper;
    string buyer;
    string source;
    string dest;
    int load;
    string description;
    string plannedDate;
    string releasedDate;

    TransportList@Owned transportList;
    Transport@InTransport inTsp;

    state Contract;
    state Release;
    state InTransit;
    state Delivered;

    Shipment@Contract(string nid, string pseller, string pshipper, string pbuyer, string psource, string pdest,
    		 int pload, string pdescription, string pplannedDate) {
        id = nid;
        seller = pseller;
        shipper = pshipper;
        buyer = pbuyer;
        seller = pseller;
        source = psource;
        dest = pdest;
        load = pload;
        description = pdescription;
        plannedDate = pplannedDate;
        transportList = new TransportList();
        ->Contract;

        System.println("");
        System.print("* ");
        System.print(pplannedDate);
        System.print(" - shipment ");
        System.print(id);
        System.println(" [Contract]");
        System.print("               seller: ");
        System.println(seller);
        System.print("               buyer: ");
        System.println(buyer);
        System.print("               shipper: ");
        System.println(shipper);
        System.print("               source port: ");
        System.println(source);
        System.print("               destination port: ");
        System.println(dest);
        System.print("               shipment description: ");
        System.println(description);
        System.println("");
    }


    transaction release(Shipment@Contract >> Release this, string date) {
        releasedDate = date;
        ->Release;

        System.println("");
        System.print("* ");
        System.print(date);
        System.print(" - shipment ");
        System.print(id);
        System.println(" [Release]");
        System.println("");
    }


    transaction setSail(Shipment@Release >> InTransit this, string date) {
        ->InTransit;

        System.println("");
        System.print("* ");
        System.print(date);
        System.print(" - shipment ");
        System.print(id);
        System.println(" [InTransit]");
        System.println("");
    }


    transaction depart(Shipment@InTransit this, string transportName, string transportType, string date, string port) {
        Transport newTransport = new Transport(transportName, transportType, source, date);
        [newTransport @ Load];
        newTransport.depart(date, port);
        [newTransport @ InTransport];
        inTsp = newTransport;
    }


    transaction layover(Shipment@InTransit this, string date, string port) {
        inTsp.stopOver(date, port);
    }


    transaction layoverDepart(Shipment@InTransit this, string date, string port) {
        inTsp.layoverDepart(date, port);
    }


    transaction transfer(Shipment@InTransit this, string transportName, string transportType, string date, string port) {
        inTsp.arrive(date, port);
        transportList.append(inTsp);

        Transport newTransport = new Transport(transportName, transportType, source, date);
        [newTransport @ Load];
        newTransport.depart(date, port);
        [newTransport @ InTransport];
        inTsp = newTransport;

        System.print("* ");
        System.print(date);
        System.print(" - transfer at port [");
        System.print(port);
        System.println("]");
        System.println("");
    }








    transaction deliver(Shipment@InTransit >> Delivered this, string date, string port) {
        inTsp.arrive(date, port);
        transportList.append(inTsp);
        ->Delivered;

        System.print("* ");
        System.print(date);
        System.print(" - shipment ");
        System.print(id);
        System.print(" [Delivered] at port [");
        System.print(port);
        System.println("]");
        System.println("");
    }

    transaction getID(Shipment this) returns string {
        return id;
    }

}