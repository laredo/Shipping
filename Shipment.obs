import "Shipping/Transport1.obs"

main contract ShippingDriver {

   int totalShipments;
   int nextID;

   ShippingDriver() {
      totalShipments = 0;
      nextID = 0;
   }

   transaction CreateAgreement(string pseller, string pshipper, string pbuyer, string psource,
                               string pdest, int pload, string pdescription, string pplannedDate) returns Shipment@Contract {

        Shipment s = new Shipment(nextID, pseller, pshipper, pbuyer, psource, pdest, pload, pdescription, pplannedDate);
        totalShipments = totalShipments + 1;
        nextID = nextID + 1;
        return s;

   }

}

contract Shipment {
   int id;
   string seller;
   string shipper;
   string buyer;
   string source;
   string dest;
   int load;
   string description;
   string plannedDate;
   string releasedDate;
   Transport@Owned transportList;


   state Contract {}
   state Release {}
   state InTransit  {}
   state Delivered {}

    Shipment@Contract(int nid, string pseller, string pshipper, string pbuyer, string psource, string pdest,
    		 int pload, string pdescription, string pplannedDate) {

       id = nid;
       seller = pseller;
       shipper = pshipper;
       buyer = pbuyer;
       seller = pseller;
       source = psource;
       dest = pdest;
       load = pload;
       description = pdescription;
       plannedDate = pplannedDate;
       ->Contract;
    }

    transaction Load (Shipment@Contract >> Release this, string transportName, string transportType, string pstartLoad) {
            // transportList = new Transport(transportName, transportType, source);
            transportList = new Transport();
            transportList.append(transportName, transportType, source);

            //releasedDate = pstartLoad;
            ->Release
            (
       			releasedDate = pstartLoad
       		);
    }

   /*contract Transport {
   	  string transportName;
   	  string departurePort;
   	  string startLoadDate;
   	  string endLoadDate;
      string arrivalPort;
      // <list of legs>
      transaction Load () {
      }
      transaction AtSea() { //create Leg
      }
      transaction Unload () {
      }
   }
   */

   contract Leg {
      int	 legID;
      int	 seqNumber;
   	  string departurePort;
   	  string departureDate;
   	  string arrivalDate;
      string arrivalPort; 	  
   }

}