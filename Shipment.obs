import "IO.obs"
import "Transport.obs"
import "LinkedList.obs"


main contract ShippingDriver {

    int totalShipments;
    int nextID;

    ShippingDriver@Owned() {
        totalShipments = 0;
        nextID = 1;
    }

    transaction createAgreement(string pseller, string pshipper, string pbuyer, string psource,
                               string pdest, int pload, string pdescription, string pplannedDate) returns Shipment@Contract {
        Shipment s = new Shipment(nextID, pseller, pshipper, pbuyer, psource, pdest, pload, pdescription, pplannedDate);
        totalShipments = totalShipments + 1;
        nextID = nextID + 1;
        return s;
    }
}


contract Shipment {
    int id;
    string seller;
    string shipper;
    string buyer;
    string source;
    string dest;
    int load;
    string description;
    string plannedDate;

    LinkedList@Owned transportList;

    state Contract;
    state Release {
        string releasedDate;
    }
    state Sailing;
    state InTransit {
        Transport@InTransport inTsp;
    }
    state Delivered;

    Shipment@Contract(int nid, string pseller, string pshipper, string pbuyer, string psource, string pdest,
    		 int pload, string pdescription, string pplannedDate) {
        id = nid;
        seller = pseller;
        shipper = pshipper;
        buyer = pbuyer;
        seller = pseller;
        source = psource;
        dest = pdest;
        load = pload;
        description = pdescription;
        plannedDate = pplannedDate;
        transportList = new LinkedList[Transport@Owned]();
        ->Contract;

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(pplannedDate);
        io.print(" - shipment ");
        io.printInt(id);
        io.println(" [Contract]");
        io.print("               seller: ");
        io.println(seller);
        io.print("               buyer: ");
        io.println(buyer);
        io.print("               shipper: ");
        io.println(shipper);
        io.print("               source port: ");
        io.println(source);
        io.print("               destination port: ");
        io.println(dest);
        io.print("               shipment description: ");
        io.println(description);
        io.println("");
    }


    transaction release(Shipment@Contract >> Release this, string date) {
        ->Release(releasedDate = date);

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(date);
        io.print(" - shipment ");
        io.printInt(id);
        io.println(" [Release]");
        io.println("");
    }


    transaction setSail(Shipment@Release >> Sailing this, string date) {
        ->Sailing;

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(date);
        io.print(" - shipment ");
        io.printInt(id);
        io.println(" [InTransit]");
        io.println("");
    }


    transaction depart(Shipment@Sailing >> InTransit this, string transportName, string transportType, string date, string port) {
        Transport newTransport = new Transport(transportName, transportType, source, date);
        [newTransport @ Load];
        newTransport.depart(date, port);
        [newTransport @ InTransport];
        ->InTransit(inTsp = newTransport);
    }


    transaction layover(Shipment@InTransit this, string date, string port) {
        inTsp.stopOver(date, port);
    }


    transaction layoverDepart(Shipment@InTransit this, string date, string port) {
        inTsp.layoverDepart(date, port);
    }


    transaction transfer(Shipment@InTransit this, string transportName, string transportType, string date, string port) {
        inTsp.arrive(date, port);
        transportList.append[Transport](inTsp);

        Transport newTransport = new Transport(transportName, transportType, source, date);
        [newTransport @ Load];
        newTransport.depart(date, port);
        [newTransport @ InTransport];
        inTsp = newTransport;

        IO io = new IO();
        io.print("* ");
        io.print(date);
        io.print(" - transfer at port [");
        io.print(port);
        io.println("]");
        io.println("");
    }

    transaction deliver(Shipment@InTransit >> Delivered this, string date, string port) {
        inTsp.arrive(date, port);
        transportList.append[Transport](inTsp);
        ->Delivered;

        IO io = new IO();
        io.print("* ");
        io.print(date);
        io.print(" - shipment ");
        io.printInt(id);
        io.print(" [Delivered] at port [");
        io.print(port);
        io.println("]");
        io.println("");
    }

    transaction getID(Shipment this) returns int {
        return id;
    }

}