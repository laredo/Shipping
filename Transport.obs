import "Leg.obs"
import "LinkedList.obs"

contract Transport {

    state Load;
    state InTransport {
        Leg@InTransit currentLeg;
    }
    state Unload {
        string destinationPort;
    };


    string transportName;
    string transportType;
    string originPort;
    LinkedList[Leg@Owned]@Owned legList;
 

    Transport@Load(string pTransportName, string pTransportType, string pOriginPort, string date) {
        transportName = pTransportName;
        transportType = pTransportType;
        originPort = pOriginPort;
        legList = new LinkedList[Leg@Owned]();
        ->Load;

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(date);
        io.print(" - transport [Load] on [");
        io.print(pTransportName);
        io.print("], type [");
        io.print(pTransportType);
        io.print("] at port [");
        io.print(pOriginPort);
        io.println("]");
    }


    transaction getTransportName(Transport this) returns string {
        return transportName;
    }


    transaction getTransportType(Transport this) returns string {
        return transportType;
    }


    transaction getOriginPort(Transport this) returns string {
        return originPort;
    }

    transaction getDestinationPort(Transport@Unload this) returns string {
        return destinationPort;
    }

    transaction depart(Transport@Load >> InTransport this, string pdepartureDate, string port) {
        Leg newLeg = new Leg(this, pdepartureDate, port);
        [newLeg @ InTransit];
        ->InTransport(currentLeg = newLeg);

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(pdepartureDate);
        io.print(" - leg [InTransit]. port [");
        io.print(port);
        io.println("]");
        io.print("* ");
        io.print(pdepartureDate);
        io.print(" - transport [InTransport]. port [");
        io.print(port);
        io.println("]");

    }

    transaction stopOver(Transport@InTransport this, string parrivalDate, string port) {
        currentLeg.setArrival(parrivalDate, port);
        [currentLeg @ Arrived];
        legList.append(currentLeg);
        [currentLeg @ Unowned];
        currentLeg = new Leg(this, "", "");

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(parrivalDate);
        io.print(" - leg [Arrived]. port [");
        io.print(port);
        io.println("]");
        io.println("");
    }


    transaction layoverDepart(Transport@ InTransport this, string date, string port) {
        Leg newLeg = new Leg(this, date, port);
        ->InTransport(currentLeg = newLeg);

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(date);
        io.print(" - leg [InTransit]. port [");
        io.print(port);
        io.println("]");
        io.println("");
    }


    transaction arrive(Transport@InTransport >> Unload this, string date, string port) {
        currentLeg.setArrival(date, port);
        [currentLeg @ Arrived];
        legList.append(currentLeg);
        [currentLeg @ Unowned];
        ->Unload(destinationPort = port);

        IO io = new IO();
        io.println("");
        io.print("* ");
        io.print(date);
        io.print(" - leg [Arrived]. port [");
        io.print(port);
        io.println("]");

        io.print("* ");
        io.print(date);
        io.print(" - transport [Unload]. port [");
        io.print(port);
        io.println("]");
    }

}

