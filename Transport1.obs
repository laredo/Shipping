import "Shipping/Leg.obs"

contract Transport {

    state Load;
    state InTransport {
        Leg@InTransit currentLeg;
    }
    state Docked;
    state Unload;


    string transportName;
    string transportType;
    string originPort;
    string destinationPort;
    LegList@Owned legList;


    Transport@Load(string pTransportName, string pTransportType, string pOriginPort) {
        transportName = pTransportName;
        transportType = pTransportType;
        originPort = pOriginPort;
        legList = new LegList();
        ->Load;
    }


    transaction getTransportName(Transport this) returns string {
        return transportName;
    }


    transaction getTransportType(Transport this) returns string {
        return transportType;
    }


    transaction getOriginPort(Transport this) returns string {
        return originPort;
    }

    transaction getDestinationPort(Transport this) returns string {
        return destinationPort;
    }

    transaction depart(Transport@Load >> InTransport this, string pdepartureDate, string port) {
        Leg newLeg = new Leg(this, pdepartureDate, port);
        [newLeg @ InTransit];

        ->InTransport(currentLeg = newLeg);
    }

    transaction stopOver(Transport@InTransport >> Docked this, string parrivalDate, string port) {
        currentLeg.setArrival(parrivalDate, port);
        [currentLeg @ Arrived];
        legList.append(currentLeg);
        [currentLeg @ Unowned];
        ->Docked;
    }

    transaction arrive(Transport@InTransport >> Unload this, string parrivalDate, string port) {
        stopOver(parrivalDate, port);
        ->Unload(destinationPort = port);
    }
}



contract TransportList {

    state Empty;
    asset state HasNext {
        TransportList@Owned next;
    }
    asset state NoNext;


    Transport@Unowned value;


    TransportList@Empty() {
        ->Empty;
    }


    transaction append(TransportList@Owned this, Transport pTransport) {
        switch this {
            case HasNext {
                next.append(pTransport);
            }
            case Empty {
                ->HasNext(value = pTransport, next = new TransportList());
            }
        }
    }


    transaction length(TransportList@Owned this) returns int {
        switch this {
            case HasNext {
                return 1 + next.length();
            }
            case Empty {
                return 0;
            }
        }
    }


    transaction nth(TransportList@Owned this, int n) returns Transport@Unowned {
        if (n == 0) {
            return value;
        } else {
            switch this {
                case HasNext {
                    return next.nth(n - 1);
                }
                case Empty {
                    return value; // ideally, this should throw an exception
                }
            }
        }
    }




}

